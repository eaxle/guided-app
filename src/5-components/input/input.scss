@import "../../1-settings/variables.scss";


// bootstrap calls inputs 'form-control'. for ourpurposes 'inputs' will live inside of 'form' components

.c-input {
  background: $input-bg;
  display: inline-block; //block is what bootstrap had for their form-control class but i don't know what it does, inline-block is what they have as an option so you don't have to use .c-form-group
  width: auto;
  border: $border-width solid $border-color;
  box-sizing: border-box;
  box-shadow: $input-box-shadow;
  text-align: left;
  color: $input-color;
  vertical-align: middle; //bootstrap had this as an option if you don't want to use .c-form-group, i don't know if we need it
}

// for rounded inputs around the platform
.c-input--rounded {
    padding-left: $input-padding-x-base;
    padding-right: $input-padding-x-base;
    padding-top: $input-padding-y-base;
    padding-bottom: $input-padding-y-base;
    font-size: $input-font-size-base;
    font-weight: $input-font-weight-base;
    line-height: $input-line-height-base;
    border-radius: $input-border-radius-base;
}

// for squared-off inputs - usually 'settings pages', the 'long-form description' box on the 'create/edit listing' page, and the 'add gender' selection during registration
.c-input--squared-sm {
    padding-left: $input-padding-x-sm;
    padding-right: $input-padding-x-sm;
    padding-top: $input-padding-y-sm;
    padding-bottom: $input-padding-y-sm;
    font-size: $input-font-size-sm;
    font-weight: $input-font-weight-sm;
    line-height: $input-line-height-sm;
    border-radius: $input-border-radius-sm;
}

// for registration sequence where inputs are a little larger

.c-input--squared-lg {
    padding-left: $input-padding-x-lg;
    padding-right: $input-padding-x-lg;
    padding-top: $input-padding-y-lg;
    padding-bottom: $input-padding-y-lg;
    font-size: $input-font-size-lg;
    font-weight: $input-font-weight-lg;
    line-height: $input-line-height-lg;
    border-radius: $input-border-radius-lg; 
}

.c-input:disabled {
    background: $input-disabled-bg;
    opacity: 1;
}

.c-input:focus {
    background: $input-focus-bg;
    color: $input-focus-color;
    border-color: $input-focus-border-color;
    border-width: $input-focus-width;
    box-shadow: $input-focus-box-shadow;
}

.c-input:hover {
    background: $input-hover-bg;
}

.c-input::placeholder {
    color: $input-placeholder-color;
    font-size: $input-placeholder-font-size;
    font-weight: $input-placeholder-font-weight;
    opacity: 1;
}

// stylelint-disable-next-line no-duplicate-selectors
select.c-input {
    &[size],
    &[multiple] {
      height: auto;
    }
}

// stylelint-disable-next-line no-duplicate-selectors
textarea.c-input {
    height: auto;
}

// Readonly controls as plain text - IF WE EVER NEED IT
//
// Apply class to a readonly input to make it appear like regular plain
// text (without any border, background color, focus indicator)

.c-input--plaintext {
    display: block;
    width: 100%;
    padding-top: $input-padding-y;
    padding-bottom: $input-padding-y;
    margin-bottom: 0; // match inputs if this class comes on inputs with default margins
    line-height: $input-line-height;
    color: $input-plaintext-color;
    background-color: transparent;
    border: solid transparent;
    box-shadow: transparent;
    border-width: $input-border-width 0;
  
    &.c-input--rounded,
    &.c-input--squared-sm,
    &.c-input--squared-lg {
      padding-right: 0;
      padding-left: 0;
    }
}